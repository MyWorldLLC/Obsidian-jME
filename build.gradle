plugins {
    id 'java-library'
    id 'maven-publish'
}

def getGitVersion(){
    "git describe --tags --always --first-parent".execute().text.trim()
}

def getGitCredentials(){
    def process = "git credential fill".execute()
    def stream = new PrintStream(process.getOutputStream(), true)
    stream.println("url=https://github.com/")
    stream.close()

    process.text.trim().split("\n").collectEntries {it.split("=")}
}

def getGitUser(){
    System.getenv("GITHUB_USER") ?: gitCredentials["username"]
}

def getGitPassword(){
    System.getenv("GITHUB_TOKEN") ?: gitCredentials["password"]
}

def getPlatform(){
    def platform = System.getProperty('os.name').toLowerCase()
    if(platform.contains('win')){
        platform = 'win'
    }else if(platform.contains('mac')){
        platform = 'mac'
    }else if(platform.contains('linux')){
        platform = 'linux'
    }
    return platform
}

def getArchitecture(){
    System.getProperty('os.arch').toLowerCase().startsWith('aarch64') ? 'amd64' : 'x64'
}

def obsidianVersion = '1.0.8'
def jmeVersion = '3.5.2-stable'
def jdkVersion = 17
group = 'com.myworldvw'
version = getGitVersion()


repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://maven.pkg.github.com/MyWorldLLC/Packages'
        credentials {
            username gitUser
            password gitPassword
        }
    }
}

sourceSets {
    main
    example {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDir 'example/java'
        }
    }
}

configurations {
    exampleImplementation.extendsFrom(implementation)
}

dependencies {

    api "com.myworldvw:obsidian:$obsidianVersion"
    api "com.myworldvw:obsidian-jfx:$obsidianVersion"
    // We need this to compile against any JFX symbols, but this should
    // *not* appear in the POM dependencies. The end user must include a
    // ObsidianJFX platform module to compile their own code.
    compileOnly "com.myworldvw:obsidian-jfx-$platform-$architecture:$obsidianVersion"

    implementation "org.jmonkeyengine:jme3-core:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-effects:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-lwjgl3:$jmeVersion"

    exampleRuntimeOnly "com.myworldvw:obsidian-$platform-$architecture:$obsidianVersion"
    exampleRuntimeOnly "com.myworldvw:obsidian-jfx-$platform-$architecture:$obsidianVersion"
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(jdkVersion)
    }
}

publishing {
    publications {
        maven(MavenPublication){
            groupId project.group
            artifactId 'obsidian-jme'
            version project.version

            from components.java
        }
    }
    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/MyWorldLLC/Packages")
            credentials {
                username gitUser
                password gitPassword
            }
        }
    }
}

task run(type: JavaExec){
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(jdkVersion)
    }
    classpath = sourceSets.example.compileClasspath + sourceSets.example.runtimeClasspath
    mainClass = 'myworld.obsidian.jme.ObsidianDemo'
}